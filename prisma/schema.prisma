generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  pending
  ongoing
  completed
  failed
}

enum Role {
  admin
  employee
}

model User {
  id             String          @id @unique @default(uuid())
  name           String          @db.VarChar(255)
  email          String          @db.VarChar(255)
  password       String
  role           Role
  isActive       Boolean         @default(true) @map("is_active")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime?       @updatedAt @map("updated_at")
  deletedAt      DateTime?       @map("deleted_at")
  createdBy      String?         @map("created_by")
  deletedBy      String?         @map("deleted_by")
  payrolls       Payroll[]
  attendances    Attendance[]
  overtimes      Overtime[]
  reimbursements Reimbursement[]
  payslips       Payslip[]
  auditLogs      AuditLog[]

  @@map(name: "users")
}

model AttendanceConfiguration {
  id                 String             @id @unique @default(uuid())
  periodStartAt      DateTime?          @map("period_start_at") @db.Time
  periodEndAt        DateTime?          @map("period_end_at") @db.Time
  hourlyRate         Int?               @map("hourly_rate")
  overtimeRate       Int?               @map("overtime_rate")
  overtimeMultiplier Decimal?           @map("overtime_multiplier")
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime?          @updatedAt @map("updated_at")
  deletedAt          DateTime?          @map("deleted_at")
  createdBy          String?            @map("created_by")
  deletedBy          String?            @map("deleted_by")
  AttendancePeriod   AttendancePeriod[]

  @@map(name: "attendance_configurations")
}

model AttendancePeriod {
  id                        String                   @id @unique @default(uuid())
  startAt                   DateTime?                @map("start_at")
  endAt                     DateTime?                @map("end_at")
  attendanceConfigurationId String                   @map("attendance_configuration_id")
  status                    Status                   @default(ongoing)
  createdAt                 DateTime                 @default(now()) @map("created_at")
  updatedAt                 DateTime?                @updatedAt @map("updated_at")
  deletedAt                 DateTime?                @map("deleted_at")
  createdBy                 String?                  @map("created_by")
  deletedBy                 String?                  @map("deleted_by")
  attendanceConfiguration   AttendanceConfiguration? @relation(fields: [attendanceConfigurationId], references: [id])
  Attendance                Attendance[]
  Reimbursement             Reimbursement[]
  Payroll                   Payroll[]
  PayslipSumary             PayslipSumary[]

  @@map(name: "attendance_periods")
}

model Attendance {
  id                 String           @id @unique @default(uuid())
  userId             String           @map("user_id")
  checkInAt          DateTime         @map("start_at")
  attendancePeriodId String           @map("attendance_period_id")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime?        @updatedAt @map("updated_at")
  deletedAt          DateTime?        @map("deleted_at")
  createdBy          String?          @map("created_by")
  deletedBy          String?          @map("deleted_by")
  user               User             @relation(fields: [userId], references: [id])
  attendancePeriod   AttendancePeriod @relation(fields: [attendancePeriodId], references: [id])
  Overtime           Overtime[]

  @@map(name: "attendances")
}

model Overtime {
  id           String     @id @unique @default(uuid())
  userId       String     @map("user_id")
  hoursTaken   Int?       @map("hours_taken")
  attendanceId String     @map("attendance_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")
  deletedAt    DateTime?  @map("deleted_at")
  createdBy    String?    @map("created_by")
  deletedBy    String?    @map("deleted_by")
  user         User       @relation(fields: [userId], references: [id])
  attendance   Attendance @relation(fields: [attendanceId], references: [id])

  @@map(name: "overtimes")
}

model Reimbursement {
  id                 String           @id @unique @default(uuid())
  userId             String           @map("user_id")
  amount             Int?
  description        String?
  status             Status           @default(pending)
  attendancePeriodId String           @map("attendance_period_id")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime?        @updatedAt @map("updated_at")
  deletedAt          DateTime?        @map("deleted_at")
  createdBy          String?          @map("created_by")
  deletedBy          String?          @map("deleted_by")
  user               User             @relation(fields: [userId], references: [id])
  attendancePeriod   AttendancePeriod @relation(fields: [attendancePeriodId], references: [id])

  @@map(name: "reimbursements")
}

model Payroll {
  id                 String           @id @unique @default(uuid())
  userId             String           @map("user_id")
  amount             Int?
  status             Status           @default(completed)
  attendancePeriodId String           @map("attendance_period_id")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime?        @updatedAt @map("updated_at")
  deletedAt          DateTime?        @map("deleted_at")
  createdBy          String?          @map("created_by")
  deletedBy          String?          @map("deleted_by")
  user               User             @relation(fields: [userId], references: [id])
  attendancePeriod   AttendancePeriod @relation(fields: [attendancePeriodId], references: [id])
  Payslip            Payslip[]

  @@map(name: "payrolls")
}

model Payslip {
  id                       String    @id @unique @default(uuid())
  userId                   String    @map("user_id")
  url                      String?   @map("url")
  status                   Status    @default(pending)
  takeHomePay              Int?      @map("take_home_pay")
  totalAttendanceAmount    Int?      @map("total_attendance_amount")
  totalOvertimeAmount      Int?      @map("total_overtime_amount")
  totalReimbursementAmount Int?      @map("total_reimbursement_amount")
  totalAttendance          Int?      @map("total_attendance")
  totalAttendanceHours     Int?      @map("total_attendance_hours")
  totalOvertimeHours       Int?      @map("total_overtime_hours")
  hoursPerDay              Int?      @map("hours_per_day")
  hourlyRate               Int?      @map("hourly_rate")
  overtimeRate             Int?      @map("overtime_rate")
  payrollId                String    @map("payroll_id")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime? @updatedAt @map("updated_at")
  deletedAt                DateTime? @map("deleted_at")
  createdBy                String?   @map("created_by")
  deletedBy                String?   @map("deleted_by")
  Payroll                  Payroll   @relation(fields: [payrollId], references: [id])
  user                     User      @relation(fields: [userId], references: [id])

  @@map(name: "payslips")
}

model PayslipSumary {
  id                 String           @id @unique @default(uuid())
  url                String           @map("url")
  attendancePeriodId String           @map("attendance_period_id")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime?        @updatedAt @map("updated_at")
  deletedAt          DateTime?        @map("deleted_at")
  createdBy          String?          @map("created_by")
  deletedBy          String?          @map("deleted_by")
  attendancePeriod   AttendancePeriod @relation(fields: [attendancePeriodId], references: [id])

  @@map(name: "payslip_sumaries")
}

model AuditLog {
  id          String    @id @unique @default(uuid())
  userId      String    @map("user_id")
  requestId   String?   @map("request_id")
  action      String?   @map("action")
  description String?   @map("description")
  table       String?   @map("table")
  dto         Json?     @map("dto")
  dataBefore  Json?     @map("data_before")
  dataAfter   Json?     @map("data_after")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  createdBy   String?   @map("created_by")
  deletedBy   String?   @map("deleted_by")
  user        User      @relation(fields: [userId], references: [id])

  @@map(name: "audit_logs")
}
